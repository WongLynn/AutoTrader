# encoding: UTF-8

from __future__ import print_function
import json
import requests
import traceback
import ssl
from threading import Thread
from queue import Queue, Empty
import time
import hmac
import base64
import hashlib
import websocket

from six.moves import input


WEBSOCKET_V2_URL = 'wss://api.bitfinex.com/ws/2'
RESTFUL_V1_URL = 'https://api.bitfinex.com/v1'
RESTFUL_V1_DOMAIN = 'https://api.bitfinex.com'


########################################################################
class BitfinexApi(object):
    """"""

    #----------------------------------------------------------------------
    def __init__(self):
        """Constructor"""
        self.ws = None
        self.thread = None
        self.active = False
        
        self.restQueue = Queue()
        self.restThread = None

        self.apiKey = ""
        self.secretKey = ""


    
    #----------------------------------------------------------------------
    def start(self):
        """"""
        self.ws = websocket.create_connection(WEBSOCKET_V2_URL,
                                              sslopt={'cert_reqs': ssl.CERT_NONE})
        
        self.active = True
        self.thread = Thread(target=self.run)
        self.thread.start()
        
        self.restThread = Thread(target=self.runRest)
        self.restThread.start()
        
        self.onConnect()
    
    #----------------------------------------------------------------------
    def reconnect(self):
        """"""
        self.ws = websocket.create_connection(WEBSOCKET_V2_URL,
                                              sslopt={'cert_reqs': ssl.CERT_NONE})   
        
        self.onConnect()
        
    #----------------------------------------------------------------------
    def run(self):
        """"""
        while self.active:
            try:
                stream = self.ws.recv()
                data = json.loads(stream)
                self.onData(data)
            except:
                msg = traceback.format_exc()
                self.onError(msg)
                self.reconnect()
    
    #----------------------------------------------------------------------
    def close(self):
        """"""
        self.active = False
        
        if self.thread:
            self.thread.join()
        
        if self.restThread:
            self.thread.join()
    
    #----------------------------------------------------------------------
    def onConnect(self):
        """"""
        print('connected')
    
    #----------------------------------------------------------------------
    def onData(self, data):
        """"""
        print(data)
    
    #----------------------------------------------------------------------
    def onError(self, msg):
        """"""
        print(msg)
    
    #----------------------------------------------------------------------
    def sendReq(self, req):
        """"""
        self.ws.send(json.dumps(req))  
        
    #----------------------------------------------------------------------
    def sendRestReq(self, path, callback, post=False):
        """"""
        self.restQueue.put((path, callback,post))
    
    #----------------------------------------------------------------------
    def runRest(self):
        """"""
        while self.active:
            try:
                path, callback, post = self.restQueue.get(timeout=1)
                if post:
                    self.httpPost(path, callback)
                else:
                    self.httpGet(path, callback)
            except Empty:
                pass
            except Exception as e:
                print(traceback.format_exc())
    
    #----------------------------------------------------------------------
    def httpGet(self, path, callback):
        """"""
        url = RESTFUL_V1_URL + path
        resp = requests.get(url)
        callback(resp.json())

    def __signature(self, payload):
        j = json.dumps(payload)
        data = base64.standard_b64encode(j.encode('utf8'))

        h = hmac.new(self.secretKey.encode('utf8'), data, hashlib.sha384)
        signature = h.hexdigest()
        return {
            "X-BFX-APIKEY": self.apiKey,
            "X-BFX-SIGNATURE": signature,
            "X-BFX-PAYLOAD": data
        }

    def _post(self, path, params):
        body = params
        rawBody = json.dumps(body)
        headers = self.__signature(body)
        url = RESTFUL_V1_DOMAIN + path
        resp = requests.post(url, headers=headers, data=rawBody, verify=True)

        return resp

    def httpPost(self, path, callback):
        """"""
        if path.startswith("/"):
            v1_path = "/v1" + path 
        else:
            v1_path = '/v1/' + path

        payload = {
            'request': v1_path,
            'nonce': str(int(time.time() * 1000000)) # nonce
        }
        resp = self._post(v1_path, payload)
        callback(resp.json())



# if __name__ == '__main__':
#     api = BitfinexApi()
#     api.start()
#
#     d = {
#         'event': 'subscribe',
#         'channel': 'book',
#         'symbol': 'BTCUSD'
#     }
#     api.sendReq(d)
#
#     input()

# 进行回测主要查看返回的数据结果
if __name__ == '__main__':
    # #*********************************************************************************************** WEBSOCKET测试
    # API_KEY = "3nreYE5Totpj4Bilr5te8aGfw3jLm3XG3paXJ0pVZUP"
    # API_SECRET = "aXOmuaDcAxV3EHcuoR4Vf4qMzBqCrnO248d633Kg5bD"
    # secretKey = API_SECRET
    # apiKey = API_KEY
    # api = BitfinexApi()
    # api.start()
    #
    # #------------------------------------------------------------             websocket 通讯public   api
    # d = {
    #     'event': 'subscribe',
    #     'channel': 'ticker',
    #     'symbol': 'BTCUSD',
    #     # 'key': 'trade:1m:tBTCUSD'
    # }
    # api.sendReq(d)

    """
    {'pair': 'BTCUSD', 'chanId': 13419, 'event': 'subscribed', 'symbol': 'tBTCUSD', 'channel': 'ticker'}

    [13419, [4005.4, 45.57089655, 4006.9, 36.60158802, 99.3, 0.0254, 4006.2, 33398.53071741, 4135.9, 3785.5]]
    """
    # ------------------------------------------------------------         websocket 通讯private api
    API_KEY = "3nreYE5Totpj4Bilr5te8aGfw3jLm3XG3paXJ0pVZUP"
    API_SECRET = "aXOmuaDcAxV3EHcuoR4Vf4qMzBqCrnO248d633Kg5bD"
    secretKey = API_SECRET
    apiKey = API_KEY
    api = BitfinexApi()
    api.start()

    # autheritation

    nonce = int(time.time() * 1000000)
    authPayload = 'AUTH' + str(nonce)
    signature = hmac.new(
        secretKey.encode(),
        msg=authPayload.encode(),
        digestmod=hashlib.sha384
    ).hexdigest()

    req = {

        'apiKey': apiKey,
        'event': 'auth',
        'authPayload': authPayload,
        'authNonce': nonce,
        'authSig': signature
    }

    api.sendReq(req)

    print(
        "************************************  margin_base  ************************************************************")
    time.sleep(5)
    req_margin_base = [0, "calc", None,
                       [
                           ["margin_base"]

                       ]
                       ]

    api.sendReq(req_margin_base)

    # # print("************************************  New Order  ************************************************************")
    # # [0, 'on', None, {'amount': '1', 'symbol': 'tEOSUSD', 'type': 'EXCHANGE LIMIT', 'price': '2.3', 'cid': 181208012646000001}]
    # time.sleep(5)
    # req_New_Order = [
    #                   0,
    #                   "on",
    #                   None,
    #                   {
    #                     #"gid": 1,
    #                     "cid": 181208012646000001,
    #                     "type": "LIMIT",
    #                     "symbol": "tEOSUSD",
    #                     "amount": "6.0",
    #                     "price": "1.7"
    #                   }
    #                 ]
    #
    # api.sendReq(req_New_Order)

    # print("************************************  Cancel Order  ************************************************************")
    # # [0, 'on', None, {'amount': '1', 'symbol': 'tEOSUSD', 'type': 'EXCHANGE LIMIT', 'price': '2.3', 'cid': 181208012646000001}]
    # time.sleep(5)
    # req_New_Order = [
    #                   0,
    #                   "oc",
    #                   None,
    #                   {
    #                     "cid": 181208012646000001,
    #                     "cid_date": CID_DATE
    #                   }
    #                 ]
    #
    # api.sendReq(req_New_Order)

    # """
    # {'userId': 808102, 'auth_id': 'cc49c1e3-3df8-4efd-9547-45cf746bc8c1', 'chanId': 0, 'caps': {'wallets': {'read': 1, 'write': 1}, 'orders': {'read': 1, 'write': 1}, 'withdraw':   {'read': 0, 'write': 1}, 'account': {'read': 1, 'write': 0}, 'positions': {'read': 1, 'write': 1}, 'history': {'read': 1, 'write': 0}, 'funding': {'read': 1, 'write': 1}}, 'event': 'auth', 'status': 'OK'}
    #         [0, 'ps', [['tEOSUSD', 'ACTIVE', -26.369349,            2.8374,              -4.511e-05, 0, None, None, None, None]]]
    #         现有持仓情况   交易对（pair） 状态    amount(做空eos数量)   baseprice(做空价格)
    #
    #
    #         现有账户资金情况分别为 现货账户，杠杆账户，以及bunding 账户
    #         [0, 'ws', [['funding', 'USD', 1200.00951753, 0, None],     #bunding 账户现有资金
    #                    ['exchange', 'ADD', 0.3840261, 0, None],
    #                    ['exchange', 'ATD', 0.76805219, 0, None],
    #                    ['exchange', 'IQX', 3.84026097, 0, None],
    #                    ['exchange', 'MTO', 0.3840261, 0, None],
    #                    ['margin', 'ETC', 0.00079896, 0, None],
    #                    ['margin', 'ETH', 0.00885465, 0, None],
    #                    ['margin', 'USD', 22.07734697, 0, None],         #maigin 账户资金，进行做空、做多之前的初始资金
    #                    ['exchange', 'USD', 0.80073412, 0, None],
    #                    ['margin', 'BAB', 0.00421102, 0, None],
    #                    ['margin', 'BSV', 0.00421102, 0, None]
    #                    ]]
    #
    #
    #         [0, 'os', []]
    #         [0, 'fos', []]
    #         [0, 'fcs', [[130220030, 'fEOS', -1, 1543790911000, 1543928585000, 26.369349, 0, 'ACTIVE', None, None, None, 3.16e-06, 2, 1543790911000, 1543928585000, 0, 0, None, 0, None, 0, 'tEOSUSD']]]
    #         [0, 'fls', []]
    #
    # """
    # print("************************************  margin_sym_tBTCUSD  ************************************************************")
    # time.sleep(5)
    # req_margin_sym_tBTCUSD = [0, "calc", None,
    #     [
    #         ["margin_sym_tBTCUSD"]
    #     ]
    #       ]
    #
    # api.sendReq(req_margin_sym_tBTCUSD)
    # """
    # [0, 'miu', ['base', [7.11379113, -0.00011559, 24.11522325, 31.22889879]]]
    # [0, 'miu', ['sym', 'tBTCUSD', [28.29580527, 79.77271462, 28.29580527, 28.29580527, None, None, None, None]]]
    #
    # """
    #
    #
    # print("************************************  position_tEOSUSD  ************************************************************")
    # time.sleep(5)
    # req_position_tBTCUSD = [0, "calc", None,
    #     [
    #         ["position_tEOSUSD"]
    #     ]
    #       ]
    #
    # api.sendReq(req_position_tBTCUSD)
    #
    #
    # print("************************************  wallet_margin_BTC  ************************************************************")
    # time.sleep(5)
    # req_wallet_margin_BTC = [0, "calc", None,
    #     [
    #         ["wallet_margin_BTC"],
    #     ]
    #       ]
    #
    # api.sendReq(req_wallet_margin_BTC)
    #
    # print("************************************  wallet_funding_USD  ************************************************************")
    # time.sleep(5)
    # req_wallet_funding_USD = [0, "calc", None,
    #     [
    #         ["wallet_funding_USD"]
    #
    #     ]
    #       ]
    #
    # api.sendReq(req_wallet_funding_USD)
    # """
    #
    #
    # """
    #
    #
    #
    #
    # print("************************************  balance  ***********************************************************************")
    # time.sleep(5)
    # req_balance = [0, "calc", None,
    #     [
    #         ["balance"]
    #     ]
    #       ]
    #
    # api.sendReq(req_balance)
    # """
    # [0, 'wu', ['funding', 'USD', 1200.00951753, 0, 1200.00951753]]
    # [0, 'bu', [1224.93623011, 1232.10803439]]
    #
    # """
    #
    # print(
    #     "************************************  margin  ***********************************************************************")
    # time.sleep(5)
    # req_margin = [0, "calc", None,
    #                [
    #                    ["margin"]
    #                ]
    #                ]
    #
    # api.sendReq(req_margin)
    # """
    #
    #
    # """
    #
    #

    ###############################################################################################################REST测试

    #
    # # ------------------------------------------------------- restful public api    'RESTFUL_V1_URL = 'https://api.bitfinex.com/v1'
    # api = BitfinexApi()                    # 包含self.secretKey  self.accessKey
    # api.start()                            #启动线程
    # print("*******************************************  pubticker ****************************************************************")
    # time.sleep(5)
    # api.httpGet('/pubticker/btcusd', api.onData)      #def httpGet(self, path, callback):  注意这里的path = '/....'  回调函数就是打印
    # print("*******************************************  stats ****************************************************************")
    # time.sleep(5)
    # api.httpGet('/stats/btcusd', api.onData)
    # print("*******************************************  book ****************************************************************")
    # time.sleep(5)
    # api.httpGet('/book/btcusd', api.onData)
    # print("*******************************************  trades ****************************************************************")
    # time.sleep(5)
    # api.httpGet('/trades/btcusd', api.onData)
    # print("*******************************************  symbols ****************************************************************")
    # time.sleep(5)
    # api.httpGet('/symbols', api.onData)
    # print("*******************************************  symbols_details ****************************************************************")
    # time.sleep(5)
    # api.httpGet('/symbols_details', api.onData)

    # ----------------------------------------------restful private  api   即使用post的方式进行处理  'RESTFUL_V1_URL = 'https://api.bitfinex.com/v1'

    # api = BitfinexApi()                       # 包含self.secretKey  self.accessKey
    # api.start()                               #启动线程
    # print("*******************************************  account_infos ****************************************************************")
    # time.sleep(5)
    # api.httpPost('/account_infos', api.onData)
    #
    # print("*******************************************  margin_infos ****************************************************************")
    # time.sleep(5)
    # api.httpPost('/margin_infos', api.onData)
    #
    # print("*******************************************  account_fees ****************************************************************")
    # time.sleep(5)
    # api.httpPost('/account_fees', api.onData)
    #
    # print("*******************************************  key_info ****************************************************************")
    # time.sleep(5)
    # api.httpPost('/key_info', api.onData)
    #
    # print("*******************************************  balances ****************************************************************")
    # time.sleep(5)
    # api.httpPost('/balances', api.onData)
    #
    # print("*******************************************  account_infos ****************************************************************")
    # time.sleep(5)
    # api.httpPost('/account_infos', api.onData)
    #
    # print("*******************************************  positions ****************************************************************")
    # time.sleep(5)
    # api.httpPost('/positions', api.onData)

    input()

# -----------------------------------------------------------------------------------------
#  restful 请求之中的post 与get 等
# -----------------------------------------------------------------------------------------
"""

get方法获取数据

Ticker            url = "https://api.bitfinex.com/v1/pubticker/btcusd"
Stats             url = "https://api.bitfinex.com/v1/stats/btcusd"
Orderbook         url = "https://api.bitfinex.com/v1/book/btcusd"
Trades            url = "https://api.bitfinex.com/v1/trades/btcusd"
Symbols           url = "https://api.bitfinex.com/v1/symbols"
Symbol Details    url = "https://api.bitfinex.com/v1/symbols_details"




poat 方法获取数据

Account Info          https://api.bitfinex.com/v1/account_infos
Margin Information    https://api.bitfinex.com/v1/margin_infos
Account Fees          https://api.bitfinex.com/v1/account_fees
Key Permissions       https://api.bitfinex.com/v1/key_info
Wallet Balances       https://api.bitfinex.com/v1/balances

New Order             https://api.bitfinex.com/v1/order/new
Cancel Order          https://api.bitfinex.com/v1/order/cancel
Cancel All Orders     https://api.bitfinex.com/v1/order/cancel/all
Replace Order         https://api.bitfinex.com/v1/order/cancel/replace
Order Status          https://api.bitfinex.com/v1/order/status
Active Orders         https://api.bitfinex.com/v1/orders

Active Positions      https://api.bitfinex.com/v1/positions
Claim Position        https://api.bitfinex.com/v1/position/claim



"""

# -----------------------------------------------------------------------------------------
#  数据流分为2部分，一部分是 交互的市场数据为book,tickr,candles,等
# -----------------------------------------------------------------------------------------
# book
"""
{'pair': 'BTCUSD', 
'chanId': 860, 
'prec': 'P0', 

'freq': 'F0', 
'event': 'subscribed', 
'len': '25', 
'channel': 'book', 
'symbol': 'tBTCUSD'
}

[860, 'hb'] 
[860, [4220.3, 0, -1]] 
[860, [4226.8, 0, -1]] 
[860, [4219.9, 1, -0.91333519]] 
[860, [4221.5, 1, -0.30332354]] 
[860, [4221.9, 1, -0.2]]


"""
# ticker
"""
{'channel': 'ticker', 'chanId': 173335, 'symbol': 'tBTCUSD', 'event': 'subscribed', 'pair': 'BTCUSD'}
[173335, [4210.1, 79.35358166, 4213.1, 222.47300991, -32.2, -0.0076, 4210, 22508.08400505, 4369.8, 4113]]
[173335, [4210, 62.17794216, 4210.1, 633.0645214, -32.1919037, -0.0076, 4210.0080963, 22521.91442335, 4369.8, 4113]]
[173335, 'hb']
[173335, [4210, 63.76872469, 4210.1, 640.25902479, -32.2, -0.0076, 4210, 22525.28446733, 4369.8, 4113]]
[173335, 'hb']
[173335, [4210, 73.68909346, 4210.1, 30.20642216, -32.1, -0.0076, 4210.1, 22526.87456001, 4369.8, 4113]]
[173335, 'hb']

"""

# trades
"""
{'pair': 'BTCUSD', 'channel': 'trades', 'event': 'subscribed', 'chanId': 912, 'symbol': 'tBTCUSD'}
[912, [[319338781, 1543763044811, -0.01, 4210], [319338779, 1543763044263, -2, 4210], [319338775, 1543763041528, -0.00640463, 4210], [319338767, 1543763040329, 0.01, 4210.0080963], [319338760, 1543763032968, -0.024677, 4210], [319338750, 1543763010025, -0.09499638, 4210], [319338748, 1543763008607, -0.10564955, 4210], [319338742, 1543763005644, -0.0998, 4210], [319338741, 1543763005391, -0.071454, 4210], [319338734, 1543763005078, -0.002, 4210], [319338723, 1543762991651, 0.02212763, 4210.1], [319338722, 1543762991651, 0.07787237, 4210.1], [319338721, 1543762990218, -0.1, 4210], [319338719, 1543762984898, -0.05737077, 4210], [319338715, 1543762980566, 0.12212763, 4210.1], [319338707, 1543762973230, 0.63796505, 4210.1], [319338706, 1543762973230, 0.43, 4210.1], [319338705, 1543762973230, 0.4, 4210.1], [319338701, 1543762964717, -0.8, 4210], [319338699, 1543762960908, -0.25929719, 4210], [319338698, 1543762959503, -1.76, 4210], [319338688, 1543762955690, -0.21710026, 4210], [319338685, 1543762954959, -0.1626194, 4210], [319338684, 1543762954957, -0.08956162, 4210], [319338683, 1543762954955, -0.05430609, 4210], [319338676, 1543762954908, -0.02715942, 4210], [319338656, 1543762950335, 0.0051, 4210.0080963], [319338653, 1543762949393, -12.57, 4210], [319338650, 1543762947475, -0.25, 4210], [319338645, 1543762946279, -0.2778, 4210]]]
[912, 'te', [319338786, 1543763050713, 0.05, 4210.0080963]]
[912, 'tu', [319338786, 1543763050713, 0.05, 4210.0080963]]
[912, 'te', [319338788, 1543763051358, -0.1, 4210]]
[912, 'tu', [319338788, 1543763051358, -0.1, 4210]]
[912, 'te', [319338795, 1543763056432, -0.024678, 4210]]
[912, 'tu', [319338795, 1543763056432, -0.024678, 4210]]
[912, 'te', [319338796, 1543763056786, -0.05127469, 4210]]
[912, 'tu', [319338796, 1543763056786, -0.05127469, 4210]]
[912, 'hb']
[912, 'te', [319338797, 1543763057137, -0.005, 4210]]
[912, 'tu', [319338797, 1543763057137, -0.005, 4210]]
[912, 'te', [319338806, 1543763061568, -0.0252, 4210]]
[912, 'tu', [319338806, 1543763061568, -0.0252, 4210]]

"""
# candles
"""
{'key': 'trade:1m:tBTCUSD', 'channel': 'candles', 'event': 'subscribed', 'chanId': 121919}
[121919, [[1543763160000, 4205, 4203, 4205, 4203, 1.46799573], [1543763100000, 4208.2, 4205, 4208.2, 4202.08582509, 11.49522924], [1543763040000, 4210.0080963, 4208.2, 4210.0080963, 4208.2, 38.34869894], [1543762980000, 4210.1, 4210, 4210.1, 4210, 0.77807533], [1543762920000, 4216.7, 4210.1, 4216.7, 4210, 21.55101981], [1543762860000, 4211.4, 4216.7, 4217.2, 4211.4, 13.89637353], [1543762800000, 4210.3, 4212.2, 4212.7, 4210.1, 6.88989814], [1543762740000, 4206, 4210.1, 4210.1, 4205.3, 11.91444858], [1543762680000, 4200.8, 4206, 4212.8, 4200.8, 22.26457299], [1543762620000, 4195.7, 4202, 4202, 4195.7, 7.06620132], [1543762560000, 4204.2, 4192.6, 4204.4, 4192.6, 15.88219869], [1543762500000, 4207.4, 4203.6, 4209.6, 4203.6, 4.61522392], [1543762440000, 4202, 4207, 4207, 4202, 2.78798331], [1543762380000, 4211.02667402, 4203.5, 4211.02667402, 4201.1, 21.67090588], [1543762320000, 4211.1, 4211, 4211.2, 4211, 7.14962093], [1543762260000, 4213.1, 4211, 4214, 4211, 4.28787583], [1543762200000, 4221.4, 4213.1, 4222.5, 4213.1, 3.50520672], [1543762140000, 4215.2, 4222.7, 4222.7, 4215.2, 18.79909178], [1543762080000, 4219.9, 4216.8, 4220, 4216.8, 1.8316], [1543762020000, 4217.9, 4219.9, 4220, 4217.9, 5.03565883], [1543761960000, 4217.4, 4217.9, 4217.93036751, 4217.4, 2.78954821], [1543761900000, 4216.4, 4217.4, 4218.5, 4216.4, 1.7434208], [1543761840000, 4221.7, 4215.9, 4221.7, 4215.7, 1.33041013], [1543761780000, 4212.9, 4222.9, 4227.3, 4212.9, 31.92506375], [1543761720000, 4213.6, 4213, 4213.6, 4211.9, 10.59397654], [1543761660000, 4215.3, 4214.1, 4216.4, 4211, 11.47723655], [1543761600000, 4226, 4214.9, 4226.1, 4214.9, 8.56630683], [1543761540000, 4219.8, 4226.1, 4226.1, 4219.8, 19.30695132], [1543761480000, 4232.41680629, 4218.7, 4232.5, 4217.5, 39.51548062], [1543761420000, 4217.5, 4232.41680629, 4237.9, 4217.5, 127.98002984], [1543761360000, 4217.4776663, 4217.4, 4217.5, 4217.4, 11.16024648], [1543761300000, 4217.4776663, 4217.499264, 4217.499264, 4217.4, 10.59785678], [1543761240000, 4217.5, 4217.4776663, 4219.3, 4217.4, 14.46960368], [1543761180000, 4221.7, 4217.4776663, 4224.2, 4217.4, 47.48947272], [1543761120000, 4190.3, 4221.4388019, 4255, 4188.9, 644.91815938], [1543761060000, 4183.2, 4190.3, 4190.3, 4182, 21.88861021], [1543761000000, 4181.8, 4182.5, 4182.5, 4181.8, 3.09355143], [1543760940000, 4180.8, 4180.8, 4180.8, 4180.8, 0.03846275], [1543760880000, 4181.8, 4180.8, 4181.8, 4179.5, 0.29955601], [1543760820000, 4188, 4183.9, 4188, 4183.8, 2.33364919], [1543760760000, 4182.6, 4188, 4188, 4182.6, 73.33142798], [1543760700000, 4182.5, 4182.50649767, 4182.50649767, 4182.5, 0.12507268], [1543760640000, 4177.86631025, 4178.3, 4178.3, 4177.86631025, 1.72340711], [1543760580000, 4177.8, 4177.8, 4177.8, 4177.8, 0.10827395], [1543760520000, 4177.1, 4177.8, 4177.86631025, 4176.8, 0.63140949], [1543760460000, 4186.8, 4176.8, 4186.80715918, 4176.50820661, 12.78133552], [1543760400000, 4189.2, 4187, 4189.3, 4185, 4.18169496], [1543760340000, 4190.3, 4189.29701585, 4190.3, 4186.1, 5.1143], [1543760280000, 4185.6, 4190.2, 4190.2, 4185.6, 9.18063787], [1543760220000, 4186.3, 4185.33588024, 4186.3, 4184.1, 10.2739], [1543760160000, 4191.78687251, 4184.9, 4192, 4184.3, 14.46041136], [1543760100000, 4186.8, 4191.78687251, 4193.8, 4186.7, 9.60199487], [1543760040000, 4179.5, 4186.7, 4186.7, 4179.5, 10.74662411], [1543759980000, 4174.1, 4179.5, 4180.4, 4174.1, 2.39112948], [1543759920000, 4180, 4175.3, 4180.1, 4174.4, 19.71918713], [1543759860000, 4173.6, 4180, 4180, 4173.56564873, 4.35143611], [1543759800000, 4169.6, 4173.5, 4173.5, 4169.6, 30.09173137], [1543759740000, 4165.53020222, 4169.4, 4169.4, 4165.53020222, 5.96882759], [1543759680000, 4162.4, 4165.19067631, 4165.19067631, 4162.4, 12.52132187], [1543759620000, 4165.53020222, 4162.3, 4165.53020222, 4159.6, 1.11973369], [1543759560000, 4168.3, 4165.5, 4168.3, 4165.5, 0.49042417], [1543759500000, 4171, 4168.1, 4171.1, 4164.5, 11.45472854], [1543759440000, 4170, 4171, 4183.1, 4170, 200.69510523], [1543759380000, 4165, 4170.1, 4170.1, 4164.6, 28.3619498], [1543759320000, 4167.8, 4166.1, 4167.9, 4166, 3.61440108], [1543759260000, 4171.7, 4168.8, 4171.7, 4168.8, 0.2793988], [1543759200000, 4167.6, 4173, 4173, 4167.5, 17.45568214], [1543759140000, 4168.3, 4167.5, 4168.3, 4166, 8.53211049], [1543759080000, 4172.8, 4168, 4172.8, 4167.9, 1.82075929], [1543759020000, 4171.7, 4175.5, 4175.5, 4171.7, 3.7505085], [1543758960000, 4171.2, 4171.7, 4171.75484388, 4171.2, 3.502], [1543758900000, 4175, 4171.2, 4175.1, 4170.9, 15.47105047], [1543758840000, 4176.1, 4175, 4176.5, 4175, 9.17319651], [1543758780000, 4175.48962888, 4175.9, 4179, 4175.48962888, 2.95653575], [1543758720000, 4171.2, 4175.4, 4175.4, 4171.1, 2.8639427], [1543758660000, 4168.9, 4168.7, 4178.6, 4168.7, 38.31153524], [1543758600000, 4162.2, 4170.8, 4173.1, 4162.2, 53.76180388], [1543758540000, 4158.5, 4162.8, 4163, 4155.5, 11.11495503], [1543758480000, 4151.7, 4162.1, 4168.2, 4151.7, 47.63432089], [1543758420000, 4151.94916586, 4151.8, 4151.94916586, 4151.7, 4.26811726], [1543758360000, 4144.2, 4151.9, 4152, 4144.1, 15.22406252], [1543758300000, 4144.2, 4144.2, 4144.2, 4144.1, 5.11236517], [1543758240000, 4144.2, 4144.2, 4144.2, 4144.1, 0.30286034], [1543758180000, 4155.91030146, 4142, 4155.9177135, 4138.6, 361.50667316], [1543758120000, 4155.9, 4156, 4156, 4155.9, 0.09], [1543758060000, 4161.0031901, 4155.9, 4161.0274845, 4155.11807434, 47.14783805], [1543758000000, 4160.8, 4160.9, 4160.9, 4160.8, 3.70662885], [1543757940000, 4160.8, 4160.8512855, 4160.8512855, 4160.8, 1.024], [1543757880000, 4160.8, 4160.8, 4160.8, 4160.8, 7.90549289], [1543757820000, 4160.8, 4162, 4162.8, 4160.8, 0.99090606], [1543757760000, 4160.5, 4160.8900148, 4160.8900148, 4155.2, 5.3918535], [1543757700000, 4169, 4163.9, 4169.1, 4163.9, 3.79273191], [1543757640000, 4169, 4169, 4169.1, 4169, 1.70509749], [1543757580000, 4163.8, 4169, 4170.1, 4163.5, 5.40220011], [1543757520000, 4158.3, 4162.9, 4163, 4158.3, 11.02685108], [1543757460000, 4159.1, 4158.4, 4160.8, 4156.2, 1.82066201], [1543757400000, 4166.66195525, 4159.1, 4166.66195525, 4155.91030146, 31.64610723], [1543757340000, 4166.6, 4166.6, 4166.66195525, 4166.6, 3.27555772], [1543757280000, 4170, 4166.4, 4170.1, 4166.3, 16.78661793], [1543757220000, 4175.9, 4170.1, 4175.9, 4170.1, 0.93908699], [1543757160000, 4178.7, 4175.9, 4178.7, 4175.9, 0.4], [1543757100000, 4179.7, 4179.3, 4180, 4179.3, 0.06284632], [1543757040000, 4176.2, 4180.6, 4181.5, 4176.2, 2.58152845], [1543756980000, 4176.2, 4176.1, 4176.2, 4176.1, 0.12224363], [1543756920000, 4175.9, 4176, 4176, 4175.8, 1.24710223], [1543756860000, 4176.2, 4175.9, 4176.2, 4175.8, 3.54029205], [1543756800000, 4174.7, 4175.8, 4175.8, 4174.7, 3.3619651], [1543756740000, 4175.3, 4174.13152525, 4175.3, 4174.13152525, 0.045], [1543756620000, 4178.77171267, 4176.2, 4182.9, 4176.1686807, 6.85432388], [1543756560000, 4174.3, 4178.8, 4178.8, 4173.4, 3.64364987], [1543756500000, 4175.8, 4171.1, 4175.8, 4170, 14.04092869], [1543756440000, 4175.9, 4175.9, 4175.9, 4175.9, 0.695], [1543756380000, 4174, 4173.9, 4174, 4173.9, 0.1], [1543756320000, 4176, 4176.7, 4176.7, 4172.4, 3.13957928], [1543756260000, 4181.2, 4176, 4181.2, 4176, 6.11333284], [1543756200000, 4186.7, 4180.4, 4187.5, 4180.1, 5.17447052], [1543756140000, 4191.5, 4186.5, 4192.3, 4186.5, 2.44364526], [1543756080000, 4184.6, 4193.4, 4193.4, 4183.8, 10.87560537], [1543756020000, 4191.220996, 4187.8, 4191.3, 4187.8, 11.98996751], [1543755960000, 4193.1, 4191.220996, 4193.1, 4191.2, 0.77922674], [1543755900000, 4191.7, 4193.1, 4199.3, 4191.6, 13.03718716], [1543755840000, 4190.31559358, 4191.7, 4191.7, 4190.31559358, 0.60933179], [1543755780000, 4190.3, 4190.4, 4190.4, 4190.3, 0.88614395], [1543755720000, 4188.3, 4190.4, 4190.4, 4188, 9.043], [1543755660000, 4188.3, 4189, 4190.08924297, 4188, 9.64585128], [1543755600000, 4188.1, 4191.6, 4191.6, 4188, 1.59816681], [1543755540000, 4191.6, 4188.1, 4191.7, 4188, 4.07183995], [1543755480000, 4191.7, 4191.6, 4191.7, 4191.6, 0.06991], [1543755420000, 4188.7, 4191.7, 4191.7, 4188.3, 1.30226663], [1543755360000, 4183.6382507, 4188.5, 4188.6, 4183.6, 4.15215958], [1543755300000, 4182, 4183.1, 4184.8, 4182, 6.72222626], [1543755240000, 4184.8, 4182.3, 4184.9, 4182.2, 0.68195756], [1543755180000, 4190.1, 4185.2, 4190.1, 4184.2, 10.68415092], [1543755120000, 4195.40848221, 4191.6, 4195.6, 4191.5, 1.19701919], [1543755060000, 4194.4, 4196.7, 4200.5, 4193.2, 14.91453861], [1543755000000, 4192.8, 4194, 4197, 4192.8, 6.97575239], [1543754940000, 4198.5, 4192.1, 4198.5, 4188.1, 20.16524532], [1543754880000, 4203.7, 4198.5, 4204.9, 4198.5, 22.06650639], [1543754820000, 4202.4, 4203.7, 4206, 4200.9, 6.22718656], [1543754760000, 4199, 4200.5, 4207, 4199, 40.63459254], [1543754700000, 4199, 4199.1, 4199.1, 4199, 3.41091825], [1543754640000, 4197.7, 4199, 4200, 4194.6, 30.40918645], [1543754580000, 4200, 4194.6, 4200.1, 4192.4, 14.54963361], [1543754520000, 4190.1, 4200, 4200.7, 4190, 76.89359316], [1543754460000, 4187.5, 4190, 4192.7, 4186.9, 29.89319799], [1543754400000, 4190.1, 4187.7, 4192.5, 4182.1, 41.90866005], [1543754340000, 4180.1, 4190, 4190, 4180, 123.93099846], [1543754280000, 4170.1, 4180, 4181.1, 4170.1, 66.2407797], [1543754220000, 4165.3, 4170, 4170, 4165, 3.8075977], [1543754160000, 4163.3, 4165.3, 4165.3, 4163.3, 2.47590534], [1543754100000, 4163, 4163.2, 4163.3, 4163, 1.2898202], [1543754040000, 4162.2, 4163.3, 4163.3, 4162.1, 10.26453758], [1543753980000, 4167.6, 4162, 4167.6, 4162, 2.59262413], [1543753920000, 4166.6, 4167.45418237, 4167.6, 4164.1, 14.50683983], [1543753860000, 4164.2, 4166.6, 4167.5, 4164.17209858, 3.66498568], [1543753800000, 4162.92717025, 4163, 4163, 4162.92717025, 0.86186106], [1543753740000, 4162.92716603, 4162.92716603, 4162.92716603, 4162.92716603, 0.005], [1543753680000, 4163, 4163, 4163, 4163, 3.102], [1543753620000, 4155.3, 4162.7, 4164.2, 4155, 53.92046794], [1543753560000, 4155.2, 4155.3, 4155.4, 4155.2, 1.0572], [1543753500000, 4156, 4155.1, 4156, 4155.1, 0.77712157], [1543753440000, 4152.9, 4156.9, 4156.9, 4151.2, 2.29059013], [1543753380000, 4151.3, 4152.9, 4159.4, 4151.3, 2.416478], [1543753320000, 4150.5, 4151.27011404, 4151.3, 4150.5, 3.40899271], [1543753260000, 4151.3, 4151.3, 4151.3, 4151.2, 0.327], [1543753200000, 4151.3, 4151.3, 4151.3, 4145.1, 16.86880183], [1543753140000, 4155.1, 4152.8, 4155.1, 4151, 6.10257766], [1543753080000, 4157.3, 4155.4, 4157.3, 4150.13836101, 5.20724425], [1543753020000, 4160.3, 4157.4, 4160.3, 4157.4, 30.25824266], [1543752960000, 4163, 4160.2, 4163, 4160, 20.36674833], [1543752900000, 4163.4, 4163.1, 4164, 4163, 7.9239603], [1543752840000, 4164.3, 4163.5, 4165.3, 4163, 14.8528206], [1543752780000, 4165.1, 4163.4, 4165.7, 4163, 11.03181746], [1543752720000, 4168.3, 4166, 4168.3, 4163.3180715, 22.834485], [1543752660000, 4168.1, 4168.2, 4168.8, 4168, 5.72499179], [1543752600000, 4167, 4167.1, 4167.1, 4162.5, 18.28760687], [1543752540000, 4167.0182505, 4167.1, 4167.1, 4167, 1.5628385], [1543752480000, 4166.225355, 4167, 4167.9, 4166.2, 22.30485667], [1543752420000, 4168.5, 4166.3, 4168.5, 4164.6, 19.18995397], [1543752360000, 4168.2516435, 4170, 4170, 4166.5, 13.90515794], [1543752300000, 4168.2516435, 4168.3, 4168.3, 4168.2516435, 1.40491494], [1543752240000, 4166.5, 4168.3, 4169.6, 4166.401554, 4.46528727], [1543752180000, 4159.4416935, 4168.7802405, 4171, 4159.4416935, 35.05993957], [1543752120000, 4158.7, 4159.5, 4159.5, 4158.7, 3.93478867], [1543752060000, 4150.6, 4156.3, 4156.3, 4148.9, 22.94929787], [1543752000000, 4160.09778767, 4150.6, 4160.1, 4148.6, 47.84138518], [1543751940000, 4160.1, 4160.1, 4160.2, 4160, 2.52863512], [1543751880000, 4160.1, 4160.1, 4160.2, 4160.1, 10.32751896], [1543751820000, 4161.3798825, 4160.1, 4161.3798825, 4158, 6.59216828], [1543751760000, 4161.68224192, 4161.3, 4161.7, 4161.3, 2.29665205], [1543751700000, 4161.4, 4161.3, 4161.4, 4161.3, 0.527905], [1543751640000, 4161.4, 4161.3, 4161.9, 4161.3, 3.41247438], [1543751580000, 4166.4, 4161.4, 4166.4, 4161.3, 5.0131393], [1543751520000, 4154.7, 4171.9, 4171.9, 4154.6, 25.16193565], [1543751460000, 4153.3, 4153.30726949, 4154.5, 4153.3, 0.97113796], [1543751400000, 4155, 4153.3, 4155, 4153.3, 3.99785976], [1543751340000, 4157.6, 4155, 4157.6, 4155, 4.69915096], [1543751280000, 4164.3, 4159.9, 4164.4, 4159.9, 4.73451085], [1543751220000, 4163.6, 4164.5, 4164.6, 4163.6, 3.58117334], [1543751160000, 4162.3, 4162.8, 4164.2, 4162.3, 7.140834], [1543751100000, 4161.9, 4162.2, 4162.2, 4161.9, 2.273075], [1543751040000, 4159.87143707, 4161.3, 4161.3, 4159.87143707, 0.720383], [1543750980000, 4159.7, 4159.9, 4159.9, 4159.7, 2.65352609], [1543750920000, 4159.8, 4159.8, 4159.9, 4159.7, 1.17932431], [1543750860000, 4154.9, 4159.4, 4160.3, 4154.9, 6.44859964], [1543750800000, 4152.06234116, 4153.8, 4153.8, 4152.06234116, 2.045], [1543750740000, 4153.5, 4152, 4153.9, 4152, 4.60137438], [1543750680000, 4154.66537313, 4153.5, 4156.4, 4153.1, 3.89406303], [1543750620000, 4161, 4153.19409419, 4162.36129373, 4150, 55.14736271], [1543750560000, 4170.7, 4160, 4170.7, 4160, 15.84917725], [1543750500000, 4168.8, 4172.3, 4176.2, 4168.8, 19.92071678], [1543750440000, 4169, 4168.5, 4169, 4168.5, 2.44229865], [1543750380000, 4169.1, 4168.9, 4169.8, 4168.1, 17.99281525], [1543750320000, 4166.9, 4169.1, 4169.94403904, 4166.9, 5.08633573], [1543750260000, 4165.2, 4167, 4167, 4165, 3.51715542], [1543750200000, 4164.5, 4166.9, 4170.3, 4164.1, 11.49946079], [1543750140000, 4160.09778767, 4161.82038, 4161.82038, 4160, 16.35486453], [1543750080000, 4160.1, 4160, 4160.1, 4160, 15.93883352], [1543750020000, 4160.5, 4160.1, 4160.5, 4160.1, 6.42704987], [1543749960000, 4160.2, 4160.3, 4161.8, 4160, 10.58309044], [1543749900000, 4164.4, 4162, 4164.4, 4160, 107.38095482], [1543749840000, 4165.4, 4165.6, 4166.8, 4161.8, 8.64490934], [1543749780000, 4166.2, 4166.8, 4170, 4165.3, 8.22180616], [1543749720000, 4164.7276635, 4166.6, 4167, 4164.5514645, 8.2608922], [1543749660000, 4167.34100707, 4164.7379751, 4167.36999423, 4161.8, 15.18941677], [1543749600000, 4160, 4167.36999423, 4167.36999423, 4160, 13.8587345], [1543749540000, 4156.1, 4157, 4157, 4155.8, 1.06707939], [1543749480000, 4157.7, 4152.9, 4161.1, 4152.9, 23.95808342], [1543749420000, 4145.6, 4159.1, 4159.9, 4145.6, 41.4443889], [1543749360000, 4145.6981715, 4145.7, 4145.7, 4145.610072, 0.19859278], [1543749300000, 4139.7, 4142.262291, 4145.2, 4139.1, 3.41755562], [1543749240000, 4141.6, 4139.83940844, 4141.6, 4138, 6.02982381], [1543749180000, 4144.4, 4141.6, 4148.6, 4141.6, 6.51748983], [1543749120000, 4141.7, 4142.1029145, 4143.3, 4137.6, 7.39670833], [1543749060000, 4132.5, 4142.4, 4144.02689465, 4132.5, 13.53115789], [1543749000000, 4128.3, 4135.1, 4139.1, 4128.3, 9.81151088], [1543748940000, 4113.9, 4128.3, 4128.6, 4113, 55.34845594], [1543748880000, 4122.4, 4113.9, 4122.4, 4113.2, 83.45160672], [1543748820000, 4132, 4122.4, 4132.1, 4122.3, 24.86777881], [1543748760000, 4139, 4132, 4139, 4132, 1.00308085]]]
[121919, [1543763100000, 4208.2, 4205, 4208.2, 4202.08582509, 11.49522924]]
[121919, [1543763160000, 4205, 4200, 4205, 4200, 1.71941207]]
[121919, 'hb']
[121919, [1543763160000, 4205, 4200, 4205, 4200, 1.71941207]]
[121919, [1543763220000, 4199.3, 4199.3, 4199.3, 4199.3, 0.10825854]]
[121919, [1543763160000, 4205, 4200, 4205, 4200, 1.71941207]]
[121919, [1543763220000, 4199.3, 4199.4, 4199.4, 4199.3, 0.30825854]]
[121919, 'hb']
[121919, [1543763160000, 4205, 4200, 4205, 4200, 1.71941207]]
[121919, [1543763220000, 4199.3, 4199.4, 4199.4, 4199.3, 0.31825854]]

"""
# -----------------------------------------------------------------------------------------
#  数据流分为2部分，一部分是 交互的市场数据为book,tickr,candles,等
# -----------------------------------------------------------------------------------------

# Wallets

"""
[
  CHAN_ID, 
  'ws',
  [
    [
      WALLET_TYPE, 
      CURRENCY, 
      BALANCE, 
      UNSETTLED_INTEREST,
      BALANCE_AVAILABLE,
      ...
    ], 
    ...
  ]
]

[
  CHAN_ID, 
  'wu',
  [
    WALLET_TYPE, 
    CURRENCY, 
    BALANCE, 
    UNSETTLED_INTEREST,
    BALANCE_AVAILABLE,
    ...
  ]
]
"""

# Orders
"""
[
  CHAN_ID, 
  'os',
  [
    [
      ID,
      GID,
      CID,
      SYMBOL,
      MTS_CREATE, 
      MTS_UPDATE, 
      AMOUNT, 
      AMOUNT_ORIG, 
      TYPE,
      TYPE_PREV,
      _PLACEHOLDER,
      _PLACEHOLDER,
      FLAGS,
      STATUS,
      _PLACEHOLDER,
      _PLACEHOLDER,
      PRICE,
      PRICE_AVG,
      PRICE_TRAILING,
      PRICE_AUX_LIMIT,
      _PLACEHOLDER,
      _PLACEHOLDER,
      _PLACEHOLDER,
      NOTIFY,
      _PLACEHOLDER,
      PLACED_ID,
      ...
    ], 
    ...
  ]
]


[
  CHAN_ID, 
  <'on', 'ou', 'oc'>,
  [
    ID, 
    GID,
    CID,
    SYMBOL, 
    MTS_CREATE, 
    MTS_UPDATE, 
    AMOUNT, 
    AMOUNT_ORIG, 
    TYPE,
    TYPE_PREV,
    _PLACEHOLDER,
    _PLACEHOLDER,
    FLAGS,
    STATUS,
    _PLACEHOLDER,
    _PLACEHOLDER,
    PRICE,
    PRICE_AVG,
    PRICE_TRAILING,
    PRICE_AUX_LIMIT,
    _PLACEHOLDER,
    _PLACEHOLDER,
    _PLACEHOLDER,
    NOTIFY, 
    HIDDEN, 
    PLACED_ID,
    ...
  ]
]
"""

# Trades
"""
[
  CHAN_ID, 
  'te', 
  [
    ID, 
    SYMBOL, 
    MTS_CREATE,
    ORDER_ID, 
    EXEC_AMOUNT, 
    EXEC_PRICE, 
    ORDER_TYPE, 
    ORDER_PRICE, 
    MAKER,
    ...
  ]
]

"""


